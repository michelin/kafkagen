name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-jar:
    name: Release JAR
    runs-on: ubuntu-latest
    steps:
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.MICHELIN_DOCKER_HUB_USERNAME }}
          password: ${{ secrets.MICHELIN_DOCKER_HUB_PASSWD }}

      - name: Checkout project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Build and test
        id: build_jar
        run: |
          ./mvnw package -Dquarkus.package.jar.type=uber-jar
          echo current_version=$(echo $(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)) >> $GITHUB_OUTPUT

      - name: Publish test report
        if: always()
        uses: mikepenz/action-junit-report@v5
        with:
          report_paths: '**/target/surefire-reports/TEST-*.xml'

      - name: Docker
        run: |
          LATEST_VERSION=$(git tag -l --sort=-version:refname | head -1 | cut -d 'v' -f 2)
          if [ "$LATEST_VERSION" == "${{ steps.build_jar.outputs.current_version }}" ]; then 
            echo "Latest version is $LATEST_VERSION. Current version is ${{ steps.build_jar.outputs.current_version }}. Pushing latest tag."
            ./mvnw package -Dquarkus.container-image.build=true -DskipTests -Dquarkus.container-image.push=true -Dquarkus.container-image.tag=${{ steps.build_jar.outputs.current_version }} -Dquarkus.container-image.additional-tags=latest
          else 
            echo "Latest version is $LATEST_VERSION. Current version is ${{ steps.build_jar.outputs.current_version }}. Not pushing latest tag."
            ./mvnw package -Dquarkus.container-image.build=true -DskipTests -Dquarkus.container-image.push=true -Dquarkus.container-image.tag=${{ steps.build_jar.outputs.current_version }}
          fi

      - name: Generate release changelog
        uses: mikepenz/release-changelog-builder-action@v5
        id: build_changelog
        with:
          configuration: 'changelog-builder.json'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release
        uses: ncipollo/release-action@v1.19.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ steps.build_changelog.outputs.changelog }}
          artifacts: ${{ github.workspace }}/target/kafkagen-${{ steps.build_jar.outputs.current_version }}-runner.jar
          draft: true
          prerelease: true
          allowUpdates: true

  release-native-linux-macos:
    name: Release Native Image ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest' ]
        include:
          - os: 'ubuntu-latest'
            platform: 'linux-amd64'
          - os: 'macos-latest'
            platform: 'darwin-arm64'
    steps:
      - name: Docker login
        if: matrix.os == 'ubuntu-latest'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.MICHELIN_DOCKER_HUB_USERNAME }}
          password: ${{ secrets.MICHELIN_DOCKER_HUB_PASSWD }}

      - name: Checkout project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          distribution: 'graalvm'
          java-version: '21'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Build
        id: build_native_linux_macos
        run: |
          ./mvnw package -Pnative -DskipTests
          echo current_version=$(echo $(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)) >> $GITHUB_OUTPUT

      - name: Docker
        if: matrix.os == 'ubuntu-latest'
        run: |
          LATEST_VERSION=$(git tag -l --sort=-version:refname | head -1 | cut -d 'v' -f 2)
          if [ "$LATEST_VERSION" == "${{ steps.build_native_linux_macos.outputs.current_version }}" ]; then 
            echo "Latest version is $LATEST_VERSION. Current version is ${{ steps.build_native_linux_macos.outputs.current_version }}. Pushing latest tag."
            ./mvnw package -Dnative -Dquarkus.container-image.build=true -DskipTests -Dquarkus.container-image.push=true -Dquarkus.container-image.tag=${{ steps.build_native_linux_macos.outputs.current_version }}-native -Dquarkus.container-image.additional-tags=latest-native
          else 
            echo "Latest version is $LATEST_VERSION. Current version is ${{ steps.build_native_linux_macos.outputs.current_version }}. Not pushing latest tag."
            ./mvnw package -Dnative -Dquarkus.container-image.build=true -DskipTests -Dquarkus.container-image.push=true -Dquarkus.container-image.tag=${{ steps.build_native_linux_macos.outputs.current_version }}-native
          fi

      - name: Generate release changelog
        uses: mikepenz/release-changelog-builder-action@v5
        id: build_changelog
        with:
          configuration: 'changelog-builder.json'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename file
        run: mv ${{ github.workspace }}/target/kafkagen-${{ steps.build_native_linux_macos.outputs.current_version }}-runner ${{ github.workspace }}/target/kafkagen-${{ steps.build_native_linux_macos.outputs.current_version }}-${{ matrix.platform }}

      - name: Update release
        uses: ncipollo/release-action@v1.19.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ steps.build_changelog.outputs.changelog }}
          artifacts: ${{ github.workspace }}/target/kafkagen-${{ steps.build_native_linux_macos.outputs.current_version }}-${{ matrix.platform }}
          draft: true
          prerelease: true
          allowUpdates: true

  release-native-windows:
    name: Build Native Image windows-amd64
    runs-on: windows-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          distribution: 'graalvm'
          java-version: '21'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Build
        id: build_native_windows
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          .\mvnw package -Pnative -DskipTests
        shell: cmd

      - name: Version
        id: version
        run: |
          $version=(& .\mvnw help:evaluate -Dexpression='project.version' -q -DforceStdout)
          "current_version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Generate release changelog
        uses: mikepenz/release-changelog-builder-action@v5
        id: build_changelog
        with:
          configuration: 'changelog-builder.json'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename file
        run: Rename-Item -Path ${{ github.workspace }}/target/kafkagen-${{ steps.version.outputs.current_version }}-runner.exe -NewName kafkagen-${{ steps.version.outputs.current_version }}-windows-amd64.exe

      - name: Update release
        uses: ncipollo/release-action@v1.19.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ steps.build_changelog.outputs.changelog }}
          artifacts: ${{ github.workspace }}/target/kafkagen-${{ steps.version.outputs.current_version }}-windows-amd64.exe
          draft: truedocker i
          prerelease: true
          allowUpdates: true
